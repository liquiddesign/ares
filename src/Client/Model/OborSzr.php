<?php
/**
 * OborSzr
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 0.6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.47
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ares\Client\Model;

use \ArrayAccess;
use \Ares\Client\ObjectSerializer;

/**
 * OborSzr Class Doc Comment
 *
 * @category Class
 * @description Tabulka finance
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OborSzr implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OborSzr';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agenda' => 'string',
        'obor' => 'string',
        'obor_text' => 'string',
        'odkaz_rvp' => 'string',
        'organ_jednotka_id' => 'int',
        'platnost_do' => '\DateTime',
        'platnost_od' => '\DateTime',
        'stav' => 'string',
        'registrace_oz' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agenda' => null,
        'obor' => null,
        'obor_text' => null,
        'odkaz_rvp' => null,
        'organ_jednotka_id' => 'int32',
        'platnost_do' => 'date',
        'platnost_od' => 'date',
        'stav' => null,
        'registrace_oz' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agenda' => 'agenda',
        'obor' => 'obor',
        'obor_text' => 'oborText',
        'odkaz_rvp' => 'odkazRvp',
        'organ_jednotka_id' => 'organJednotkaId',
        'platnost_do' => 'platnostDo',
        'platnost_od' => 'platnostOd',
        'stav' => 'stav',
        'registrace_oz' => 'registraceOz'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agenda' => 'setAgenda',
        'obor' => 'setObor',
        'obor_text' => 'setOborText',
        'odkaz_rvp' => 'setOdkazRvp',
        'organ_jednotka_id' => 'setOrganJednotkaId',
        'platnost_do' => 'setPlatnostDo',
        'platnost_od' => 'setPlatnostOd',
        'stav' => 'setStav',
        'registrace_oz' => 'setRegistraceOz'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agenda' => 'getAgenda',
        'obor' => 'getObor',
        'obor_text' => 'getOborText',
        'odkaz_rvp' => 'getOdkazRvp',
        'organ_jednotka_id' => 'getOrganJednotkaId',
        'platnost_do' => 'getPlatnostDo',
        'platnost_od' => 'getPlatnostOd',
        'stav' => 'getStav',
        'registrace_oz' => 'getRegistraceOz'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agenda'] = isset($data['agenda']) ? $data['agenda'] : null;
        $this->container['obor'] = isset($data['obor']) ? $data['obor'] : null;
        $this->container['obor_text'] = isset($data['obor_text']) ? $data['obor_text'] : null;
        $this->container['odkaz_rvp'] = isset($data['odkaz_rvp']) ? $data['odkaz_rvp'] : null;
        $this->container['organ_jednotka_id'] = isset($data['organ_jednotka_id']) ? $data['organ_jednotka_id'] : null;
        $this->container['platnost_do'] = isset($data['platnost_do']) ? $data['platnost_do'] : null;
        $this->container['platnost_od'] = isset($data['platnost_od']) ? $data['platnost_od'] : null;
        $this->container['stav'] = isset($data['stav']) ? $data['stav'] : null;
        $this->container['registrace_oz'] = isset($data['registrace_oz']) ? $data['registrace_oz'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agenda
     *
     * @return string
     */
    public function getAgenda()
    {
        return $this->container['agenda'];
    }

    /**
     * Sets agenda
     *
     * @param string $agenda Agenda
     *
     * @return $this
     */
    public function setAgenda($agenda)
    {
        $this->container['agenda'] = $agenda;

        return $this;
    }

    /**
     * Gets obor
     *
     * @return string
     */
    public function getObor()
    {
        return $this->container['obor'];
    }

    /**
     * Sets obor
     *
     * @param string $obor Obor
     *
     * @return $this
     */
    public function setObor($obor)
    {
        $this->container['obor'] = $obor;

        return $this;
    }

    /**
     * Gets obor_text
     *
     * @return string
     */
    public function getOborText()
    {
        return $this->container['obor_text'];
    }

    /**
     * Sets obor_text
     *
     * @param string $obor_text Popis oboru
     *
     * @return $this
     */
    public function setOborText($obor_text)
    {
        $this->container['obor_text'] = $obor_text;

        return $this;
    }

    /**
     * Gets odkaz_rvp
     *
     * @return string
     */
    public function getOdkazRvp()
    {
        return $this->container['odkaz_rvp'];
    }

    /**
     * Sets odkaz_rvp
     *
     * @param string $odkaz_rvp Odkaz RVP
     *
     * @return $this
     */
    public function setOdkazRvp($odkaz_rvp)
    {
        $this->container['odkaz_rvp'] = $odkaz_rvp;

        return $this;
    }

    /**
     * Gets organ_jednotka_id
     *
     * @return int
     */
    public function getOrganJednotkaId()
    {
        return $this->container['organ_jednotka_id'];
    }

    /**
     * Sets organ_jednotka_id
     *
     * @param int $organ_jednotka_id organizačn&#237; jednotka
     *
     * @return $this
     */
    public function setOrganJednotkaId($organ_jednotka_id)
    {
        $this->container['organ_jednotka_id'] = $organ_jednotka_id;

        return $this;
    }

    /**
     * Gets platnost_do
     *
     * @return \DateTime
     */
    public function getPlatnostDo()
    {
        return $this->container['platnost_do'];
    }

    /**
     * Sets platnost_do
     *
     * @param \DateTime $platnost_do Platnost z&#225;znamu od
     *
     * @return $this
     */
    public function setPlatnostDo($platnost_do)
    {
        $this->container['platnost_do'] = $platnost_do;

        return $this;
    }

    /**
     * Gets platnost_od
     *
     * @return \DateTime
     */
    public function getPlatnostOd()
    {
        return $this->container['platnost_od'];
    }

    /**
     * Sets platnost_od
     *
     * @param \DateTime $platnost_od platnost z&#225;znamu do
     *
     * @return $this
     */
    public function setPlatnostOd($platnost_od)
    {
        $this->container['platnost_od'] = $platnost_od;

        return $this;
    }

    /**
     * Gets stav
     *
     * @return string
     */
    public function getStav()
    {
        return $this->container['stav'];
    }

    /**
     * Sets stav
     *
     * @param string $stav stav
     *
     * @return $this
     */
    public function setStav($stav)
    {
        $this->container['stav'] = $stav;

        return $this;
    }

    /**
     * Gets registrace_oz
     *
     * @return \DateTime
     */
    public function getRegistraceOz()
    {
        return $this->container['registrace_oz'];
    }

    /**
     * Sets registrace_oz
     *
     * @param \DateTime $registrace_oz Datum ozn&#225;men&#237; registrace
     *
     * @return $this
     */
    public function setRegistraceOz($registrace_oz)
    {
        $this->container['registrace_oz'] = $registrace_oz;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
