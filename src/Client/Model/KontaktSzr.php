<?php
/**
 * KontaktSzr
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 0.6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.47
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ares\Client\Model;

use \ArrayAccess;
use \Ares\Client\ObjectSerializer;

/**
 * KontaktSzr Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KontaktSzr implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'KontaktSzr';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organ_jednotka_id' => 'int',
        'kontakt_id' => 'int',
        'zdroj_dat' => 'int',
        'hodnota' => 'string',
        'typ' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organ_jednotka_id' => 'int32',
        'kontakt_id' => 'int32',
        'zdroj_dat' => null,
        'hodnota' => null,
        'typ' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organ_jednotka_id' => 'organJednotkaId',
        'kontakt_id' => 'kontaktId',
        'zdroj_dat' => 'zdrojDat',
        'hodnota' => 'hodnota',
        'typ' => 'typ'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organ_jednotka_id' => 'setOrganJednotkaId',
        'kontakt_id' => 'setKontaktId',
        'zdroj_dat' => 'setZdrojDat',
        'hodnota' => 'setHodnota',
        'typ' => 'setTyp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organ_jednotka_id' => 'getOrganJednotkaId',
        'kontakt_id' => 'getKontaktId',
        'zdroj_dat' => 'getZdrojDat',
        'hodnota' => 'getHodnota',
        'typ' => 'getTyp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organ_jednotka_id'] = isset($data['organ_jednotka_id']) ? $data['organ_jednotka_id'] : null;
        $this->container['kontakt_id'] = isset($data['kontakt_id']) ? $data['kontakt_id'] : null;
        $this->container['zdroj_dat'] = isset($data['zdroj_dat']) ? $data['zdroj_dat'] : null;
        $this->container['hodnota'] = isset($data['hodnota']) ? $data['hodnota'] : null;
        $this->container['typ'] = isset($data['typ']) ? $data['typ'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organ_jednotka_id
     *
     * @return int
     */
    public function getOrganJednotkaId()
    {
        return $this->container['organ_jednotka_id'];
    }

    /**
     * Sets organ_jednotka_id
     *
     * @param int $organ_jednotka_id Organizačn&#237; jednotka
     *
     * @return $this
     */
    public function setOrganJednotkaId($organ_jednotka_id)
    {
        $this->container['organ_jednotka_id'] = $organ_jednotka_id;

        return $this;
    }

    /**
     * Gets kontakt_id
     *
     * @return int
     */
    public function getKontaktId()
    {
        return $this->container['kontakt_id'];
    }

    /**
     * Sets kontakt_id
     *
     * @param int $kontakt_id ID kontaktu
     *
     * @return $this
     */
    public function setKontaktId($kontakt_id)
    {
        $this->container['kontakt_id'] = $kontakt_id;

        return $this;
    }

    /**
     * Gets zdroj_dat
     *
     * @return int
     */
    public function getZdrojDat()
    {
        return $this->container['zdroj_dat'];
    }

    /**
     * Sets zdroj_dat
     *
     * @param int $zdroj_dat zdroj dat
     *
     * @return $this
     */
    public function setZdrojDat($zdroj_dat)
    {
        $this->container['zdroj_dat'] = $zdroj_dat;

        return $this;
    }

    /**
     * Gets hodnota
     *
     * @return string
     */
    public function getHodnota()
    {
        return $this->container['hodnota'];
    }

    /**
     * Sets hodnota
     *
     * @param string $hodnota hodnota
     *
     * @return $this
     */
    public function setHodnota($hodnota)
    {
        $this->container['hodnota'] = $hodnota;

        return $this;
    }

    /**
     * Gets typ
     *
     * @return string
     */
    public function getTyp()
    {
        return $this->container['typ'];
    }

    /**
     * Sets typ
     *
     * @param string $typ typ
     *
     * @return $this
     */
    public function setTyp($typ)
    {
        $this->container['typ'] = $typ;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
