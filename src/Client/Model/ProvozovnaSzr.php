<?php
/**
 * ProvozovnaSzr
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 0.6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.47
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ares\Client\Model;

use \ArrayAccess;
use \Ares\Client\ObjectSerializer;

/**
 * ProvozovnaSzr Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProvozovnaSzr implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProvozovnaSzr';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organ_jednotka_nazev' => 'string',
        'organ_jednotka_zkraceny_nazev' => 'string',
        'organ_jednotka_id' => 'int',
        'platnost_od' => '\DateTime',
        'angazovana_osoba' => '\Ares\Client\Model\AngazovanaOsoba',
        'platnost_do' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organ_jednotka_nazev' => null,
        'organ_jednotka_zkraceny_nazev' => null,
        'organ_jednotka_id' => 'int32',
        'platnost_od' => 'date',
        'angazovana_osoba' => null,
        'platnost_do' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organ_jednotka_nazev' => 'organJednotkaNazev',
        'organ_jednotka_zkraceny_nazev' => 'organJednotkaZkracenyNazev',
        'organ_jednotka_id' => 'organJednotkaId',
        'platnost_od' => 'platnostOd',
        'angazovana_osoba' => 'angazovanaOsoba',
        'platnost_do' => 'platnostDo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organ_jednotka_nazev' => 'setOrganJednotkaNazev',
        'organ_jednotka_zkraceny_nazev' => 'setOrganJednotkaZkracenyNazev',
        'organ_jednotka_id' => 'setOrganJednotkaId',
        'platnost_od' => 'setPlatnostOd',
        'angazovana_osoba' => 'setAngazovanaOsoba',
        'platnost_do' => 'setPlatnostDo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organ_jednotka_nazev' => 'getOrganJednotkaNazev',
        'organ_jednotka_zkraceny_nazev' => 'getOrganJednotkaZkracenyNazev',
        'organ_jednotka_id' => 'getOrganJednotkaId',
        'platnost_od' => 'getPlatnostOd',
        'angazovana_osoba' => 'getAngazovanaOsoba',
        'platnost_do' => 'getPlatnostDo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organ_jednotka_nazev'] = isset($data['organ_jednotka_nazev']) ? $data['organ_jednotka_nazev'] : null;
        $this->container['organ_jednotka_zkraceny_nazev'] = isset($data['organ_jednotka_zkraceny_nazev']) ? $data['organ_jednotka_zkraceny_nazev'] : null;
        $this->container['organ_jednotka_id'] = isset($data['organ_jednotka_id']) ? $data['organ_jednotka_id'] : null;
        $this->container['platnost_od'] = isset($data['platnost_od']) ? $data['platnost_od'] : null;
        $this->container['angazovana_osoba'] = isset($data['angazovana_osoba']) ? $data['angazovana_osoba'] : null;
        $this->container['platnost_do'] = isset($data['platnost_do']) ? $data['platnost_do'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organ_jednotka_nazev
     *
     * @return string
     */
    public function getOrganJednotkaNazev()
    {
        return $this->container['organ_jednotka_nazev'];
    }

    /**
     * Sets organ_jednotka_nazev
     *
     * @param string $organ_jednotka_nazev Organizačn&#237; jednotka
     *
     * @return $this
     */
    public function setOrganJednotkaNazev($organ_jednotka_nazev)
    {
        $this->container['organ_jednotka_nazev'] = $organ_jednotka_nazev;

        return $this;
    }

    /**
     * Gets organ_jednotka_zkraceny_nazev
     *
     * @return string
     */
    public function getOrganJednotkaZkracenyNazev()
    {
        return $this->container['organ_jednotka_zkraceny_nazev'];
    }

    /**
     * Sets organ_jednotka_zkraceny_nazev
     *
     * @param string $organ_jednotka_zkraceny_nazev Zkr&#225;cen&#253; n&#225;zev organizačn&#237; jednotky
     *
     * @return $this
     */
    public function setOrganJednotkaZkracenyNazev($organ_jednotka_zkraceny_nazev)
    {
        $this->container['organ_jednotka_zkraceny_nazev'] = $organ_jednotka_zkraceny_nazev;

        return $this;
    }

    /**
     * Gets organ_jednotka_id
     *
     * @return int
     */
    public function getOrganJednotkaId()
    {
        return $this->container['organ_jednotka_id'];
    }

    /**
     * Sets organ_jednotka_id
     *
     * @param int $organ_jednotka_id Identifik&#225;tor organizačn&#237; jednotky
     *
     * @return $this
     */
    public function setOrganJednotkaId($organ_jednotka_id)
    {
        $this->container['organ_jednotka_id'] = $organ_jednotka_id;

        return $this;
    }

    /**
     * Gets platnost_od
     *
     * @return \DateTime
     */
    public function getPlatnostOd()
    {
        return $this->container['platnost_od'];
    }

    /**
     * Sets platnost_od
     *
     * @param \DateTime $platnost_od Zač&#225;tek platnosti
     *
     * @return $this
     */
    public function setPlatnostOd($platnost_od)
    {
        $this->container['platnost_od'] = $platnost_od;

        return $this;
    }

    /**
     * Gets angazovana_osoba
     *
     * @return \Ares\Client\Model\AngazovanaOsoba
     */
    public function getAngazovanaOsoba()
    {
        return $this->container['angazovana_osoba'];
    }

    /**
     * Sets angazovana_osoba
     *
     * @param \Ares\Client\Model\AngazovanaOsoba $angazovana_osoba angazovana_osoba
     *
     * @return $this
     */
    public function setAngazovanaOsoba($angazovana_osoba)
    {
        $this->container['angazovana_osoba'] = $angazovana_osoba;

        return $this;
    }

    /**
     * Gets platnost_do
     *
     * @return \DateTime
     */
    public function getPlatnostDo()
    {
        return $this->container['platnost_do'];
    }

    /**
     * Sets platnost_do
     *
     * @param \DateTime $platnost_do Konec platnosti
     *
     * @return $this
     */
    public function setPlatnostDo($platnost_do)
    {
        $this->container['platnost_do'] = $platnost_do;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
