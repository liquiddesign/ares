<?php
/**
 * AngazovanySubjektSzr
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 0.6.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.47
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ares\Client\Model;
use \Ares\Client\ObjectSerializer;

/**
 * AngazovanySubjektSzr Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AngazovanySubjektSzr extends EkonomickySubjektZaklad 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AngazovanySubjektSzr';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'adresa' => '\Ares\Client\Model\Adresa',
        'firma' => 'string',
        'jmeno' => 'string',
        'odkaz' => 'string',
        'poznamka' => 'string',
        'prijmeni' => 'string',
        'rejstrik' => 'int',
        'titul_pred' => 'string',
        'titul_za' => 'string',
        'typ_zahajeni' => 'string',
        'zamereni' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'adresa' => null,
        'firma' => null,
        'jmeno' => null,
        'odkaz' => null,
        'poznamka' => null,
        'prijmeni' => null,
        'rejstrik' => null,
        'titul_pred' => null,
        'titul_za' => null,
        'typ_zahajeni' => null,
        'zamereni' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adresa' => 'adresa',
        'firma' => 'firma',
        'jmeno' => 'jmeno',
        'odkaz' => 'odkaz',
        'poznamka' => 'poznamka',
        'prijmeni' => 'prijmeni',
        'rejstrik' => 'rejstrik',
        'titul_pred' => 'titulPred',
        'titul_za' => 'titulZa',
        'typ_zahajeni' => 'typZahajeni',
        'zamereni' => 'zamereni'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adresa' => 'setAdresa',
        'firma' => 'setFirma',
        'jmeno' => 'setJmeno',
        'odkaz' => 'setOdkaz',
        'poznamka' => 'setPoznamka',
        'prijmeni' => 'setPrijmeni',
        'rejstrik' => 'setRejstrik',
        'titul_pred' => 'setTitulPred',
        'titul_za' => 'setTitulZa',
        'typ_zahajeni' => 'setTypZahajeni',
        'zamereni' => 'setZamereni'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adresa' => 'getAdresa',
        'firma' => 'getFirma',
        'jmeno' => 'getJmeno',
        'odkaz' => 'getOdkaz',
        'poznamka' => 'getPoznamka',
        'prijmeni' => 'getPrijmeni',
        'rejstrik' => 'getRejstrik',
        'titul_pred' => 'getTitulPred',
        'titul_za' => 'getTitulZa',
        'typ_zahajeni' => 'getTypZahajeni',
        'zamereni' => 'getZamereni'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }




    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['adresa'] = isset($data['adresa']) ? $data['adresa'] : null;
        $this->container['firma'] = isset($data['firma']) ? $data['firma'] : null;
        $this->container['jmeno'] = isset($data['jmeno']) ? $data['jmeno'] : null;
        $this->container['odkaz'] = isset($data['odkaz']) ? $data['odkaz'] : null;
        $this->container['poznamka'] = isset($data['poznamka']) ? $data['poznamka'] : null;
        $this->container['prijmeni'] = isset($data['prijmeni']) ? $data['prijmeni'] : null;
        $this->container['rejstrik'] = isset($data['rejstrik']) ? $data['rejstrik'] : null;
        $this->container['titul_pred'] = isset($data['titul_pred']) ? $data['titul_pred'] : null;
        $this->container['titul_za'] = isset($data['titul_za']) ? $data['titul_za'] : null;
        $this->container['typ_zahajeni'] = isset($data['typ_zahajeni']) ? $data['typ_zahajeni'] : null;
        $this->container['zamereni'] = isset($data['zamereni']) ? $data['zamereni'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adresa
     *
     * @return \Ares\Client\Model\Adresa
     */
    public function getAdresa()
    {
        return $this->container['adresa'];
    }

    /**
     * Sets adresa
     *
     * @param \Ares\Client\Model\Adresa $adresa adresa
     *
     * @return $this
     */
    public function setAdresa($adresa)
    {
        $this->container['adresa'] = $adresa;

        return $this;
    }

    /**
     * Gets firma
     *
     * @return string
     */
    public function getFirma()
    {
        return $this->container['firma'];
    }

    /**
     * Sets firma
     *
     * @param string $firma Firma
     *
     * @return $this
     */
    public function setFirma($firma)
    {
        $this->container['firma'] = $firma;

        return $this;
    }

    /**
     * Gets jmeno
     *
     * @return string
     */
    public function getJmeno()
    {
        return $this->container['jmeno'];
    }

    /**
     * Sets jmeno
     *
     * @param string $jmeno Jm&#233;no
     *
     * @return $this
     */
    public function setJmeno($jmeno)
    {
        $this->container['jmeno'] = $jmeno;

        return $this;
    }

    /**
     * Gets odkaz
     *
     * @return string
     */
    public function getOdkaz()
    {
        return $this->container['odkaz'];
    }

    /**
     * Sets odkaz
     *
     * @param string $odkaz Odkaz
     *
     * @return $this
     */
    public function setOdkaz($odkaz)
    {
        $this->container['odkaz'] = $odkaz;

        return $this;
    }

    /**
     * Gets poznamka
     *
     * @return string
     */
    public function getPoznamka()
    {
        return $this->container['poznamka'];
    }

    /**
     * Sets poznamka
     *
     * @param string $poznamka Pozn&#225;mka
     *
     * @return $this
     */
    public function setPoznamka($poznamka)
    {
        $this->container['poznamka'] = $poznamka;

        return $this;
    }

    /**
     * Gets prijmeni
     *
     * @return string
     */
    public function getPrijmeni()
    {
        return $this->container['prijmeni'];
    }

    /**
     * Sets prijmeni
     *
     * @param string $prijmeni Př&#237;jmen&#237;
     *
     * @return $this
     */
    public function setPrijmeni($prijmeni)
    {
        $this->container['prijmeni'] = $prijmeni;

        return $this;
    }

    /**
     * Gets rejstrik
     *
     * @return int
     */
    public function getRejstrik()
    {
        return $this->container['rejstrik'];
    }

    /**
     * Sets rejstrik
     *
     * @param int $rejstrik Č&#237;slo v rejstř&#237;ku
     *
     * @return $this
     */
    public function setRejstrik($rejstrik)
    {
        $this->container['rejstrik'] = $rejstrik;

        return $this;
    }

    /**
     * Gets titul_pred
     *
     * @return string
     */
    public function getTitulPred()
    {
        return $this->container['titul_pred'];
    }

    /**
     * Sets titul_pred
     *
     * @param string $titul_pred Titul před jm&#233;nem
     *
     * @return $this
     */
    public function setTitulPred($titul_pred)
    {
        $this->container['titul_pred'] = $titul_pred;

        return $this;
    }

    /**
     * Gets titul_za
     *
     * @return string
     */
    public function getTitulZa()
    {
        return $this->container['titul_za'];
    }

    /**
     * Sets titul_za
     *
     * @param string $titul_za Titul za jm&#233;nem
     *
     * @return $this
     */
    public function setTitulZa($titul_za)
    {
        $this->container['titul_za'] = $titul_za;

        return $this;
    }

    /**
     * Gets typ_zahajeni
     *
     * @return string
     */
    public function getTypZahajeni()
    {
        return $this->container['typ_zahajeni'];
    }

    /**
     * Sets typ_zahajeni
     *
     * @param string $typ_zahajeni Typ zah&#225;jen&#237;
     *
     * @return $this
     */
    public function setTypZahajeni($typ_zahajeni)
    {
        $this->container['typ_zahajeni'] = $typ_zahajeni;

        return $this;
    }

    /**
     * Gets zamereni
     *
     * @return string
     */
    public function getZamereni()
    {
        return $this->container['zamereni'];
    }

    /**
     * Sets zamereni
     *
     * @param string $zamereni Zaměřen&#237;
     *
     * @return $this
     */
    public function setZamereni($zamereni)
    {
        $this->container['zamereni'] = $zamereni;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
